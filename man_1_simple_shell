.TH HSH 1 "April 21, 2025" GNU
.LO 1

.SH NAME
.B hsh
- Holberton SHell

.SH SYNOPSIS
.B ./hsh

.SH DESCRIPTION
HSH is a simple shell command interpreter that prompts the user for instructions, then gets the command read from STDIN and executes it.
It relies on the value of the PATH environment variable, in order to be able to find a command without the need to specify its absolute path, using the \fIstat\fR system call.
If the command is found, \fIfork\fR is called to create a new process that will execute the command using the \fIexecve\fR system call. It also supports some built-in commands.

.SS Interactive Mode
When launched, HSH automatically enters the interactive mode, and can be used by typing any command. In this case, the user can stop the shell using the \fIexit\fR command.
HSH can also be called from another shell, by using \fIecho\fR and piping the desired command to HSH. There is no need to exit HSH in this case.

.SS Built-In Commands
Specific commands that can be used within the shell. Each built-in command can be invoked by using its name, eventually followed by one or more argument(s) if required.
.br
The supported built-in commands and their meaning are the following:
.RS
.LP
\fBexit\fR [\fISTATUS\fR]
.IP
Exits the shell with code \fISTATUS\fR if specified, or with the exit status of the previous command otherwise.
.LP
\fBenv, printenv\fR
.IP
Prints all environment variables to STDOUT, one per line.
.LP
\fBsetenv\fR \fIVARIABLE\fR \fIVALUE\fR
.IP
Adds \fIVARIABLE\fR to the environment and initializes it to \fIVALUE\fR. If \fIVARIABLE\fR already exists, its current value is updated to \fIVALUE\fR.
.LP
\fBunsetenv\fR \fIVARIABLE\fR
.IP
Removes \fIVARIABLE\fR from the environment if it exists.
.LP
\fBcd\fR [\fIDIRECTORY\fR]
.IP
Changes the current working directory to \fIDIRECTORY\fR if specified, or to the HOME directory otherwise. The hyphen (-) can also be specified as \fIDIRECTORY\fR to access the previous working directory. This command uses the \fIgetcwd\fR and the \fIchdir\fR system calls to operate the change of current directory. The PWD and OLDPWD environment variables will be updated accordingly.
.LP
\fBhelp\fR [\fIBUILT-IN\fR]
.IP
Prints the help to STDOUT for the command \fIBUILT-IN\fR if specified, or for all built-in commands otherwise.
.LP
\fBhistory\fR
.IP
Prints to STDOUT the history of all commands.
.RE

.SS Path Search
When locating a command, HSH will first try to find a built-in command that matches the name it is looking for.
If none is found but the name of the command starts with a slash or a period, it will simply try to execute the command as such.
Otherwise, it will try to find the command in each directory entry contained in the PATH environment variable.

.SS Special Features
HSH handles a few special features commonly avaiable in a shell, such as \fBhistory\fR, \fBexpansion\fR and \fBcomments\fR:
.br
- \fBHistory\fR:
When launched, HSH reads and loads, if it exists, the history file of all commands from the previous session, located in the HOME directory.
This list of commands is constantly updated, everytime a command is typed. When the shell exits, HSH writes this list to the same file, overwriting it.
.br
- \fBExpansion\fR:
Expanding a variable can be achieved using the dollar symbol ($), followed by the name of an environment variable. Expanding the process identifier (PID) can be achieved using two consecutive dollar symbols ($$). Expanding the exit status of the previous command can be achieved using a dollar symbol followed by a question mark ($?).
.br
- \fBComments\fR:
Comments can be written using a hash mark (#). Anything that comes after this symbol will be ignored by HSH.


.SH EXIT STATUS
If terminated manually on regular execution with the \fIexit\fR command or the \fIEOF\fR signal, HSH will exit with the status code of the last command executed.
Unless an error occured with the last command, the status code should be (0). If a built-in command fails, HSH will set the status code (99) and print an error message to STDERR.
If a specified command does not exist or if it is not found, HSH will exit with the status code (127) and print an error message to STDERR.
If an error occured when creating a process to execute a specified command, HSH will exit with the status code (-1) and print an error message to STDERR.

.SH ENVIRONMENT
HSH needs some of the environment variables in order to work properly, and can change some of them. Built-in commands \fBsetenv\fR and \fBunsetenv\fR should not be used to change or remove them, especially PWD and OLDPWD.
.br
Those variables are the following:
.RS
.IP \fBHOME\fR
This variable contains the path to the HOME directory, and is used by the \fBcd\fR built-in command as default \fIDIRECTORY\fR if none is provided.
It is also used when HSH starts and stops, to read and write the history of commands.
.IP \fBPATH\fR
This variable contains different paths, and is used by HSH to search for an executable.
.IP \fBPWD\fR
This variable contains the path to the current working directory, and is updated by the \fBcd\fR built-in command everytime it is used.
.IP \fBOLDPWD\fR
This variable contains the path to the previous working directory, and is updated by the \fBcd\fR built-in command everytime it is used.
.RE

.SH FILES
HSH should be compiled using GCC with warning flags, to ensure a proper compilation: \fBgcc -Wall -Werror -Wextra -pedantic -std=gnu89 *.c -o hsh\fR
.br
It will need all of the following files:
.RS
.LP
\fIbuiltin.c\fR
- The file containing functions related to built-in commands.
.LP
\fIcommands.c\fR
- The file containing functions related to the command execution.
.LP
\fIenvironment.c\fR
- The file containing functions related to environment variables.
.LP
\fIhsh.c\fR
- The file containing the main function (entry point) of the program.
.LP
\fImain.h\fR
- The header file containing structures and functions prototypes.
.LP
\fIpaths.c\fR
- The file containing functions related to the path search.
.LP
\fIprogram.c\fR
- The file containing functions related to starting and stopping the program.
.RE

.SH
AUTHORS
Dorine Lemee, Gwendal Minguy-PÃ¨lerin

.SH
SEE ALSO
getline(3), stat(2), fork(2), execve(2), wait(2)
